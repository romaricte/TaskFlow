datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// User roles in the system.
enum UserRole {
  USER
  ADMIN
}

/// Task statuses.
enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

/// Represents a user of the TaskFlow application.
model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  password         String
  name             String?
  role             UserRole   @default(USER)
  projectsOwned    Project[]  @relation("ProjectsOwned")
  memberProjects   Project[]  @relation("ProjectMembers")
  assignedTasks    Task[]     @relation("TaskAssignee")
  messages         Message[]
  files            File[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

/// Represents a project which contains tasks, messages, and files.
model Project {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  ownerId      Int
  owner        User      @relation("ProjectsOwned", fields: [ownerId], references: [id])
  members      User[]    @relation("ProjectMembers")
  tasks        Task[]
  messages     Message[]
  files        File[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

/// Represents a task within a project.
model Task {
  id            Int        @id @default(autoincrement())
  title         String
  description   String?
  status        TaskStatus @default(TODO)
  projectId     Int
  project       Project    @relation(fields: [projectId], references: [id])
  assignedToId  Int?
  assignedTo    User?      @relation("TaskAssignee", fields: [assignedToId], references: [id])
  dueDate       DateTime?
  files         File[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

/// Represents a chat message associated with a project.
model Message {
  id         Int      @id @default(autoincrement())
  content    String
  projectId  Int
  project    Project  @relation(fields: [projectId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

/// Represents a file uploaded within a task or a project.
model File {
  id           Int      @id @default(autoincrement())
  fileName     String
  fileUrl      String
  taskId       Int?
  task         Task?    @relation(fields: [taskId], references: [id])
  projectId    Int?
  project      Project? @relation(fields: [projectId], references: [id])
  uploadedById Int
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  createdAt    DateTime @default(now())
}